
# This .travis.yml file looks complicated, because it is! Here's what it does:
#   - Build a `gbr` binary for darwin/amd64, linux/386+amd64, and windows/386+amd64
#     (windows builds are cross-compiled from linux thanks to mingw-w64)
#   - Run `go test` for all packages on darwin/amd64 and linux/amd64
#   - Works even though cgo crosscompilation is a bit of a mess

# this installs go via gimme, travis's go downloader
# gimme is able to build cross-compiling go toolchains,
# but does not support cgo afaict, so we're only using
# it to get gox to do our bidding.
language: go
env:
  - GO_VERSION=go1.8.1
  - GO_VERSION=go1.7.5
  - GO_VERSION=go1.6.4

matrix:
  # I'm not sure why travis insists on running a build with os=linux and an empty
  # env but if it really wants to, let it, just don't make it fail our builds
  allow_failures:
   - os: linux
     env:
  # A true build matrix would be combinatorial - here we're only interested in
  # a few, specific build configurations.
  include:
   # at the time of this writing, travis has a semi-experimental osx option
   # builds run slower, but it's really handy because cross-compiling OSX
   # binaries got increasingly hard over the years
   - os: osx
     env: BROTLI_OS=darwin BROTLI_ARCH=amd64
   # thankfully, ubuntu 12.04 has a multilib variant of gcc readily available
   - os: linux
     env: BROTLI_OS=linux BROTLI_ARCH=386
     addons:
       apt:
         packages:
           - gcc-multilib
           - g++-multilib
   - os: linux
     env: BROTLI_OS=windows BROTLI_ARCH=386 TRIPLET=i686-w64-mingw32
     addons:
       apt:
         packages:
           # there's a meta-package but I could never get it to work on ubuntu 12.04
           # (current travis-ci linux distribution at the time of this commit)
           - gcc-mingw-w64-i686
           - g++-mingw-w64-i686
           - binutils-mingw-w64-i686
   - os: linux
     env: BROTLI_OS=windows BROTLI_ARCH=amd64 TRIPLET=x86_64-w64-mingw32
     addons:
       apt:
         packages:
           - gcc-mingw-w64-x86-64
           - g++-mingw-w64-x86-64
           - binutils-mingw-w64-x86-64
before_install:
  # our 'canonical import path' is gopkg.in-based, not github.com, cf. #17
  - export BROTLI_CANONICAL_IMPORT=${GOPATH}/src/gopkg.in/kothar/brotli-go.v0
  - mkdir -p ${BROTLI_CANONICAL_IMPORT}
  - rsync -az ${TRAVIS_BUILD_DIR}/ ${BROTLI_CANONICAL_IMPORT}/
  - cd ${BROTLI_CANONICAL_IMPORT}
  - rm -rf ${TRAVIS_BUILD_DIR}
  - export TRAVIS_BUILD_DIR=${BROTLI_CANONICAL_IMPORT}
install:
  # install gvm
  - if [[ $GO_VERSION ]]; then bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer); fi
  - if [[ $GO_VERSION ]]; then source /home/travis/.gvm/scripts/gvm; fi
  - if [[ $GO_VERSION ]]; then gvm install ${GO_VERSION} -B; fi
  - if [[ $GO_VERSION ]]; then gvm use ${GO_VERSION}; fi

  # -d = download only, in some cases we're cross-compiling so we don't want to
  # be pre-compiling them just yet
  # -v = verbose, the go tools are disturbingly silent by default
  - go get -d -v ./...
  - go get -u github.com/golang/lint/golint
  - go get -u golang.org/x/tools/cmd/goimports
script:
  # gox lets us cross-compile pretty easily
  # - go get github.com/mitchellh/gox
  - export OSARCH=$BROTLI_OS/$BROTLI_ARCH
  - if [[ -n $TRIPLET ]]; then export CC=$TRIPLET-gcc; export CXX=$TRIPLET-g++; fi
  # for an ldflags explanation, cf. https://github.com/kothar/brotli-go/issues/1#issuecomment-156091015
  # BROTLI_EXT is just handy to be able to call `file` later
  - if [[ $BROTLI_OS = windows ]]; then export BROTLI_LDFLAGS="$BROTLI_LDFLAGS -extldflags \"-Wl,--allow-multiple-definition\""; export BROTLI_EXT=".exe"; fi
  - if [[ $OSARCH = "linux/amd64" || $OSARCH = "darwin/amd64" ]]; then go vet ./...; fi
  - if [[ $OSARCH = "linux/amd64" || $OSARCH = "darwin/amd64" ]]; then diff <(goimports -d .) <(printf ""); fi
  - if [[ $OSARCH = "linux/amd64" || $OSARCH = "darwin/amd64" ]]; then diff <(golint ./...) <(printf ""); fi
  - if [[ $OSARCH = "linux/amd64" || $OSARCH = "darwin/amd64" ]]; then go test -v -cpu=2 ./...; fi
  - if [[ $OSARCH = "linux/amd64" || $OSARCH = "darwin/amd64" ]]; then go test -v -cpu=1,2,4 -short -race ./...; fi
  # - (cd gbr && gox -osarch "$OSARCH" -ldflags "$BROTLI_LDFLAGS" -cgo -output="gbr" && file gbr${BROTLI_EXT})
